/*
 * @author	Elijah Freestone 
 *
 * Project	MDF3Project2
 * 
 * Package	com.elijahfreestone.mdf3project2
 * 
 * Date		Jul 12, 2014
 */

package com.elijahfreestone.mdf3project2;

import android.app.Activity;
import android.content.Context;
import android.content.pm.PackageManager;
import android.hardware.Camera;
import android.hardware.Camera.CameraInfo;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;

import com.elijahfreestone.mdf3project2.PictureHandler;

// TODO: Auto-generated Javadoc
/**
 * The Class MainActivity.
 */
public class MainActivity extends Activity implements SensorEventListener {
	boolean sensorInitialized;
	Sensor myAccelSensor;
	SensorManager mySensorManager;
	float NOISE = 19.5f;
	Context myContext;
	static String TAG = "MainActivity";
	ImageView newImageView;
	static Camera myCamera;
	static int myCameraID = 0;
	boolean hasCamera;
	
	//Button testButton;

	/* (non-Javadoc)
	 * @see android.app.Activity#onCreate(android.os.Bundle)
	 */
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		myContext = this;
		newImageView = (ImageView) findViewById(R.id.newImageView);
		//myCamera = null;
		
		sensorInitialized = false;
		//Instantiate sensor and manager
		mySensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
		if (mySensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER) != null) {
			myAccelSensor = mySensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
		}
		mySensorManager.registerListener(this, myAccelSensor, SensorManager.SENSOR_DELAY_NORMAL);
		
		hasCamera = checkDeviceForCamera();
		myCamera = getCameraInstance();
//		if (hasCamera) {
//			myCamera = Camera.open(myCameraID);
//			Log.i(TAG, "Device has Camera");
//		} else {
//			Log.i(TAG, "No Camera");
//		}  
		
		Button testButton = (Button) findViewById(R.id.testButton);
		testButton.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				myCamera.takePicture(null, null, new PictureHandler(getApplicationContext()));
				
			} 
		});
	} //onCreate close
	
	/* (non-Javadoc)
	 * @see android.app.Activity#onResume()
	 * 
	 * onResume is used to reset the sensor listener
	 */
	public void onResume() {
		super.onResume();
		mySensorManager.registerListener(this, myAccelSensor, SensorManager.SENSOR_DELAY_NORMAL);
	} //onResume close 
	
	/* (non-Javadoc) 
	 * @see android.app.Activity#onPause()
	 * 
	 * onPause is used to unregister the sensor listener to avoid battery drainage
	 */
	public void onPause() {
		super.onPause();
		mySensorManager.unregisterListener(this);
		
		//Release Camera
		if (myCamera != null) {
			//myCamera.release();
		}  
	} //onPause close

	/* (non-Javadoc)
	 * @see android.hardware.SensorEventListener#onAccuracyChanged(android.hardware.Sensor, int)
	 */
	@Override
	public void onAccuracyChanged(Sensor sensor, int accuracy) {
		// TODO Auto-generated method stub
		
	} //onAccuracyChanged close

	/* (non-Javadoc)
	 * @see android.hardware.SensorEventListener#onSensorChanged(android.hardware.SensorEvent)
	 */
	@Override
	public void onSensorChanged(SensorEvent event) {
		float lastXAxis = 0;
		float lastYAxis = 0;
		float lastZAxis = 0;
		
		float xAxis = event.values[0];
		float yAxis = event.values[1];
		float zAxis = event.values[2];
		
		//Set or create default values if first time sensor has been activated
		if (!sensorInitialized) {
			lastXAxis = xAxis;
			lastYAxis = yAxis;
			lastZAxis = zAxis;
			
			sensorInitialized = true;
		} else {
			//Get delta values for sensor data
			float xDelta = Math.abs(lastXAxis - xAxis);
			float yDelta = Math.abs(lastYAxis - yAxis);
			float zDelta = Math.abs(lastZAxis - zAxis);
			
			//Zero out delta values below threshold level
			if (xDelta < NOISE) xDelta = 0;
			if (yDelta < NOISE) yDelta = 0;
			if (zDelta < NOISE) zDelta = 0;
			
			if (xDelta > yDelta) {
				Log.i(TAG, "X axis");  
				
//				if (hasCamera) {
//					getCameraInstance();
//					Log.i(TAG, "Device has Camera"); 
//					myCamera.takePicture(null, null, new PictureHandler(getApplicationContext()));
//				} else { 
//					Log.i(TAG, "No Camera");
//				}  
			} else if (yDelta > xDelta) {
				Log.i(TAG, "Y axis");
			}
		}
	} //onSensorChanged close 
	
	//Check if device has a camera. Based on ADR camera doc
	private boolean checkDeviceForCamera(Context context) {
		if (!myContext.getPackageManager().hasSystemFeature(
				PackageManager.FEATURE_CAMERA)) {
			Log.i(TAG, "@@@");
			return false;
		} else {
//			myCameraID = findFrontFacingCamera();
//			if (myCameraID < 0) {
//				Log.i(TAG, "No Front Camera");
//			} else {
//				myCamera = Camera.open(myCameraID); 
//			}
			return true;
		}
	} // checkDeviceForCamera close

	public static Camera getCameraInstance() {
		myCamera = null;
		try {
			releaseCamera();
			myCamera = Camera.open();
			Log.i(TAG, "Camera instance TRY");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		return myCamera;
	} //getCameraInstance close
	
	private static void releaseCamera() {
		if (myCamera != null) {
			myCamera.release(); 
			myCamera = null;
		}
	}
	
	private int findFrontFacingCamera() {
		int cameraId = -1;
		// Search for the front facing camera
		int numberOfCameras = Camera.getNumberOfCameras();
		for (int i = 0; i < numberOfCameras; i++) {
			CameraInfo info = new CameraInfo();
			Camera.getCameraInfo(i, info);
			if (info.facing == CameraInfo.CAMERA_FACING_FRONT) {
				Log.i(TAG, "Camera found");
				cameraId = i;
				break;
			}
		}
		return cameraId;
	}
}
